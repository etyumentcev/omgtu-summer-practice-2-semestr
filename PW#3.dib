#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №1. Знакомство с потоками.

**Цель:** Познакомиться с возможностями класса System.Thread платформы .NET Framework.

**Результаты:** После выполнения работы Вы сможете:
1. Запускать длительные операции в отдельном потоке.
2. Завершать поток.
3. Дожидаться завершения выполнения потока. 


**Материалы для самостоятельного изучения**.
1. [Основы управления потоками](https://learn.microsoft.com/en-us/dotnet/standard/threading/managed-threading-basics)
2. [Использование потоков](https://learn.microsoft.com/en-us/dotnet/standard/threading/using-threads-and-threading)
3. [Примитив синхронизации Барьер](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier)
4. [Interlocked операции](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0)

## Задание.
Реализовать вычисление определенного интеграла методом трапеции в несколько потоков.

Отрезок, на котором происходит вычисление, разбивается на отрезки по количеству потоков. Для каждого отрезка значение 
интеграла считается в отдельном потоке, после завершения вычисоения полученный рельтаты суммирутся.

**Указание**.
1. Для суммирования результатов удобно воспользоваться разделяемой переменной, к которой будут прибалятся результаты вычисления прямо в самом потоке. Для синхронизации операций сложения лучше всего восользоваться [Interlocked операцией](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0).
2. Основная функция долна дождаться завершения всех потоков, которые вычисляют значение на отрезках, прежде чем возвратить результат. Для этого удобнее всего использовать Примитив синхронизации Барьер](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier).

#!csharp

using System;
using System.Threading;
using System.Threading.Tasks;
using static System.Threading.Barrier;

class DefiniteIntegral
{
    //
    // a, b - границы отрезка, на котором происходит вычисление опредленного интеграла
    // function - функция, для которой вычисляется определнный интеграл
    // step - размер одного шага разбиения
    // threadsNumber - число потоков, которые используются для вычислений
    //
    public static double Solve(double a, double b, Func<double, double> function, double step, int threadsnumber)
    {
        double sum = 0; //общая сумма
        int steps = (int)((b-a)/step); //общее количество шагов n 
        double steps_ = (b-a)/steps; // шаг разбиения
        Barrier barrier = new Barrier(threadsnumber+1); 
        void Program(int index) 
        {
            double summa = 0; 
            int shag = steps / threadsnumber; //кол-во шагов, которые должен обрабатывать каждый поток
            int the_start = index * shag; //начальный шаг для текущего потока
            int the_end = the_start + shag; //конечный
            if (index == threadsnumber - 1) the_end = steps;
            for (int i = the_start; i < the_end; i++)
            {
                double x_1 = a + i * steps_;
                double x_2 = a + (i + 1) * steps_;
                summa += 0.5 * (function(x_1) + function(x_2)) * steps_;
            }
            double value1, value2;
            do
            {
                value1 = sum; // Сохраняем текущее значение sum
                value2 = value1 + summa; //Вычисляем новое значение
            }
            while (value1 != Interlocked.CompareExchange(ref sum, value2, value1)); //

            barrier.SignalAndWait(); //сигнал о завершении работы потока, пусть теперь ждет другие
        }
        Thread[] threads = new Thread[threadsnumber];
        for (int i = 0; i < threadsnumber; i++)
        {
            int index = i;
            threads[i] = new Thread(() => Program(index));
            threads[i].Start();
        }
        barrier.SignalAndWait(); //основной поток ждет
        return sum;
    }
}

#!csharp

#r "nuget: xunit, 2.8.1"

using Xunit;

var X = (double x) => x;
var SIN = (double x) => Math.Sin(x);

Assert.Equal(0, DefiniteIntegral.Solve(-1, 1, X, 1e-4, 2), 1e-4);

Assert.Equal(0, DefiniteIntegral.Solve(-1, 1, SIN, 1e-5, 8), 1e-4);

Assert.Equal(50, DefiniteIntegral.Solve(0, 10, X, 1e-6, 8), 1e-5);
