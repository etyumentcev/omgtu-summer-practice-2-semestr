#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №1. Знакомство с потоками.

**Цель:** Познакомиться с возможностями класса System.Thread платформы .NET Framework.

**Результаты:** После выполнения работы Вы сможете:
1. Запускать длительные операции в отдельном потоке.
2. Завершать поток.
3. Дожидаться завершения выполнения потока. 


**Материалы для самостоятельного изучения**.
1. [Основы управления потоками](https://learn.microsoft.com/en-us/dotnet/standard/threading/managed-threading-basics)
2. [Использование потоков](https://learn.microsoft.com/en-us/dotnet/standard/threading/using-threads-and-threading)
3. [Примитив синхронизации Барьер](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier)
4. [Interlocked операции](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0)

## Задание.
Реализовать вычисление определенного интеграла методом трапеции в несколько потоков.

Отрезок, на котором происходит вычисление, разбивается на отрезки по количеству потоков. Для каждого отрезка значение 
интеграла считается в отдельном потоке, после завершения вычисоения полученный рельтаты суммирутся.

**Указание**.
1. Для суммирования результатов удобно воспользоваться разделяемой переменной, к которой будут прибалятся результаты вычисления прямо в самом потоке. Для синхронизации операций сложения лучше всего восользоваться [Interlocked операцией](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0).
2. Основная функция долна дождаться завершения всех потоков, которые вычисляют значение на отрезках, прежде чем возвратить результат. Для этого удобнее всего использовать Примитив синхронизации Барьер](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier).

#!csharp

using System.Threading;
//
// Вычисление определенного интеграла
//
class Part
{
    public double start;
    public double end;
    public Func<double, double> function;
    public double step;
    public double res;   
}
class DefiniteIntegral
{
    //
    // a, b - границы отрезка, на котором происходит вычисление опредленного интеграла
    // function - функция, для которой вычисляется определнный интеграл
    // step - размер одного шага разбиения
    // threadsNumber - число потоков, которые используются для вычислений
    //
    static int Counter = 0;
    public static void ProcessItself(object obj) 
    {
        Part p_obj = obj as Part;
        int divisions = (int)((p_obj.end - p_obj.start) / p_obj.step);
        for (int i = 0; i < divisions; i++)
        {
            double sum = p_obj.res + 
                (p_obj.function(p_obj.start + p_obj.step * i) + p_obj.function(p_obj.start + p_obj.step * (i + 1))) / 2 * p_obj.step;
            Interlocked.Exchange(ref p_obj.res, sum);
        }
        Interlocked.Increment(ref Counter);
    }
    public static double Solve(double a, double b, Func<double, double> function, double step, int threadsnumber)
    {
        Counter = 0;
        Part[] parts = new Part[threadsnumber];
        Thread myThread;
        for (int i = 1; i <= threadsnumber; i++)
        {
            parts[i - 1] = new Part() { start = a + (b - a) / threadsnumber * (i - 1),
                end = a + (b - a) / threadsnumber * i, function = function, step = step, res = 0.0};
            myThread = new Thread(new ParameterizedThreadStart(ProcessItself));

            myThread.Start(parts[i - 1]);
        }
        double result = 0.0;
        while (Counter != threadsnumber) { }
        foreach (Part part in parts) { result += part.res; }
        // отсюда надо начинать реализацию задачи
        return result;
    }
}

#!csharp

#r "nuget: xunit, 2.8.1"

using Xunit;

var X = (double x) => x;
var SIN = (double x) => Math.Sin(x);
Assert.Equal(0, DefiniteIntegral.Solve(-1, 1, X, 1e-4, 2), 1e-4);

Assert.Equal(0, DefiniteIntegral.Solve(-1, 1, SIN, 1e-5, 8), 1e-4);

Assert.Equal(50, DefiniteIntegral.Solve(0, 10, X, 1e-6, 8), 1e-5);
