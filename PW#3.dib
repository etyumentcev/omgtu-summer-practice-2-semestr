#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №1. Знакомство с потоками.

**Цель:** Познакомиться с возможностями класса System.Thread платформы .NET Framework.

**Результаты:** После выполнения работы Вы сможете:
1. Запускать длительные операции в отдельном потоке.
2. Завершать поток.
3. Дожидаться завершения выполнения потока. 


**Материалы для самостоятельного изучения**.
1. [Основы управления потоками](https://learn.microsoft.com/en-us/dotnet/standard/threading/managed-threading-basics)
2. [Использование потоков](https://learn.microsoft.com/en-us/dotnet/standard/threading/using-threads-and-threading)
3. [Примитив синхронизации Барьер](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier)
4. [Interlocked операции](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0)

## Задание.
Реализовать вычисление определенного интеграла методом трапеции в несколько потоков.

Отрезок, на котором происходит вычисление, разбивается на отрезки по количеству потоков. Для каждого отрезка значение 
интеграла считается в отдельном потоке, после завершения вычисоения полученный рельтаты суммирутся.

**Указание**.
1. Для суммирования результатов удобно воспользоваться разделяемой переменной, к которой будут прибалятся результаты вычисления прямо в самом потоке. Для синхронизации операций сложения лучше всего восользоваться [Interlocked операцией](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0).
2. Основная функция долна дождаться завершения всех потоков, которые вычисляют значение на отрезках, прежде чем возвратить результат. Для этого удобнее всего использовать Примитив синхронизации Барьер](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier).

#!csharp

using System.Threading;
using static System.Threading.Barrier;
//
// Вычисление определенного интеграла
//
class DefiniteIntegral
{
    //
    // a, b - границы отрезка, на котором происходит вычисление опредленного интеграла
    // function - функция, для которой вычисляется определнный интеграл
    // step - размер одного шага разбиения
    // threadsNumber - число потоков, которые используются для вычислений
    //
    public static double Solve(double a, double b, Func<double, double> function, double step, int threadsnumber)
    {
        double result = 0.0;
        double segment = (b - a) / threadsnumber; // размер отрезка для каждого потока
        Barrier barrier = new Barrier(threadsnumber + 1); // барьер с threadsnumber + 1 участниками, 1 главный добавляется
        for (int i = 0; i < threadsnumber; i++)
        {
            double start = a + i * segment; // начало отрезка для потока
            double end = start + segment; // конец
            Thread t1 = new Thread(() => // создаем поток c методом его выполнения
            {
                double segmentresult = 0;
                segmentresult += 0.5 * (function(start) + function(end)); // добавляем значения ф-ии на начале и конце сегмента
                double a = (end - start) / step; // кол-во шагов
                for (int j = 1; j < a; j++) // идем по сегменту с нашим шагом и добавляем значение ф-ии в точках
                {
                    double x = start + j * step;
                    segmentresult += function(x);
                }
                segmentresult *= step; // результат по методу трапеции на сегменте отрезка
                double newresult, output;
                do // прибавляем результат на частях отрезка к общему
                {
                    newresult = result;
                    output = newresult + segmentresult;
                } 
                while (Interlocked.CompareExchange(ref result, output, newresult) != newresult); // атомарное сравнение, если result = newresult, то добавляем в result output, если нет оставляем result
                barrier.SignalAndWait(); // поток закончил выполняться и ждет остальные
            });
            t1.Start(); // запуск потока
        }
        barrier.SignalAndWait(); // ждем пока завершатся все потоки
        return result;
    }
}

#!csharp

#r "nuget: xunit, 2.8.1"

using Xunit;

var X = (double x) => x;
var SIN = (double x) => Math.Sin(x);

Assert.Equal(0, DefiniteIntegral.Solve(-1, 1, X, 1e-4, 2), 1e-4);

Assert.Equal(0, DefiniteIntegral.Solve(-1, 1, SIN, 1e-5, 8), 1e-4);

Assert.Equal(50, DefiniteIntegral.Solve(0, 10, X, 1e-6, 8), 1e-5);
